name: Test and Build
description: Example starter Build Action for a new application. Please copy this file in your application repository
inputs:
  module:
    description: "bruker internal pyopenms"
    required: true
  version:
    description: "Version to deploy"
    required: true
  sonar-token:
    description: "sonar token"
    required: true
  aws-access-key-id:
    description: "AWS access key id to login into the ECR or CodeArtifact."
    required: true
  aws-secret-access-key:
    description: "AWS secret access key to login into the ECR or CodeArtifact."
    required: true
  paserbuild-aws-access-key-id:
    description: "AWS access key id to login into the ECR or CodeArtifact."
    required: true
  paserbuild-aws-secret-access-key:
    description: "AWS secret access key to login into the ECR or CodeArtifact."
    required: true
  github-token:
    description: "github access token"
    required: true
  aws-region:
    description: "AWS region"
    required: false
    default: "eu-central-1"
  domain:
    description: "lib domain"
    required: false
    default: "bruker"
  repository:
    description: "lib repo"
    required: false
    default: "bruker-artifacts"
  aws-acc:
    description: "AWS Account"
    required: false
    default: "460648541852"


runs:
  using: "composite"
  steps:

    - name: Configure AWS credentials
      id: login-aws
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        aws-access-key-id: ${{ inputs.paserbuild-aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.paserbuild-aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}

    - name: Debug
      shell: bash
      run: |
        python -m pip install pip -U
        python --version
        pip --version

    - name: Get number of CPU cores
      uses: SimenB/github-actions-cpu-cores@v2
      id: cpu-cores

    - name: Setup cmake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.25.x'

    - name: Build on linux
      shell: bash
      run: |
        PYTHON_VERSIONS=$(cat OpenMS/.github/workflows/python_versions.json)
        yum install -y jq
        cmake --version
        
        mkdir -p /data/wheelhouse/
        mkdir -p /data/wheelhouse/before_fix/
        
        LD_OLD_LIBRARY_PATH=$LD_LIBRARY_PATH
        
        mkdir openms-build
        cd openms-build
        cmake -DCMAKE_BUILD_TYPE="Release" -DOPENMS_CONTRIB_LIBS="/contrib-build/" -DCMAKE_PREFIX_PATH="/contrib-build/" /OpenMS
        make -j${{ steps.cpu-cores.outputs.count }} OpenMS

        # compile and configure OpenMS
        for py in $(echo "${PYTHON_VERSIONS}" | jq -r '.[]'); do
          py=$(echo "$py" | tr -d " \n")
          pynodot=$(echo "$py" | tr -d ".")
          PYBIN=$(echo /opt/python/cp*${pynodot})
        
          # Create a venv for this python version
          "$PYBIN/bin/python" -m venv $pynodot
          source $pynodot/bin/activate
        
          pip install -U Cython
          pip install -U setuptools
          pip install -U wheel
          pip install 'numpy<=1.26.4'
          pip install -U pytest
          pip install -U autowrap

          # configure (don't copy deps since we use auditwheel)
          cmake -DNO_DEPENDENCIES=ON -DOPENMS_CONTRIB_LIBS="/contrib-build/" -DCMAKE_PREFIX_PATH="/contrib-build/" -DPYOPENMS=On -DPython_ROOT_DIR=$PYBIN -DPython_FIND_STRATEGY="LOCATION" -DPY_NUM_THREADS=${{ steps.cpu-cores.outputs.count }} $GITHUB_WORKSPACE/OpenMS
          make -j${{ steps.cpu-cores.outputs.count }} pyopenms
        
          # ensure auditwheel can find the libraries
          export LD_LIBRARY_PATH=$LD_OLD_LIBRARY_PATH:`pwd`/lib

          # strip the libraries before repairing
          strip --strip-all lib/libOpenMS.so
          strip --strip-all lib/libOpenSwathAlgo.so

          pushd pyOpenMS
            # Bundle stripped plus external shared libraries into the wheels
            for whl in dist/pyopenms*.whl; do
              auditwheel repair "$whl" -w wheelhouse/
            done

            mv wheelhouse/* $GITHUB_WORKSPACE/data/wheelhouse/
          popd
          export LD_LIBRARY_PATH=$LD_OLD_LIBRARY_PATH
        
          # clean previous pyopenms libs
          rm pyOpenMS/pyopenms/_pyopenms*.so
          # deactivate the venv
          deactivate
        done

#    - name: Run all available deployment scripts
#      shell: bash
#      run: ./deployments/scripts/all_scripts.sh
#

#
#    - name: Prepare requirements
#      shell: bash
#      run: |
#        aws codeartifact login --tool pip --domain ${{ inputs.domain }} --repository ${{ inputs.repository }} --domain-owner ${{ inputs.aws-acc }}
#        pip install -r requirements/common.txt
#        pip download -r requirements/bruker.txt -d pips
#        pip install -r requirements/bruker.txt
#        pip install -r requirements/dev.txt
#
#    - name: run tests
#      shell: bash
#      run: python -m unittest discover -s "tests/" -p "test_*.py" -v
